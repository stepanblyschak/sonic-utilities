"""
This CLI plugin was auto-generated by using 'sonic-cli-gen' utility
"""

import click
import tabulate
import json
import utilities_common.cli as clicommon

from utilities_common.switch_trimming import (
    CFG_SWITCH_TRIMMING,
    CFG_TRIM_KEY
)


#
# Helpers -------------------------------------------------------------------------------------------------------------
#


def format_attr_value(entry, attr):
    """ Helper that formats attribute to be presented in the table output.

    Args:
        entry (Dict[str, str]): CONFIG DB entry configuration.
        attr (Dict): Attribute metadata.

    Returns:
        str: formatted attribute value.
    """

    if attr["is-leaf-list"]:
        value = entry.get(attr["name"], [])
        return "\n".join(value) if value else "N/A"
    return entry.get(attr["name"], "N/A")


#
# CLI -----------------------------------------------------------------------------------------------------------------
#


@click.group(
    name="switch-trimming",
    cls=clicommon.AliasedGroup
)
def SWITCH_TRIMMING():
    """ Show switch trimming feature configuration """

    pass


@SWITCH_TRIMMING.command(
    name="global"
)
@click.option(
    "-j", "--json", "json_format",
    help="Display in JSON format",
    is_flag=True,
    default=False
)
@clicommon.pass_db
@click.pass_context
def SWITCH_TRIMMING_GLOBAL(ctx, db, json_format):
    """ Show switch trimming global configuration """

    header = [
        "Configuration",
        "Value"
    ]
    body = []

    table = db.cfgdb.get_table(CFG_SWITCH_TRIMMING)
    entry = table.get(CFG_TRIM_KEY, {})

    if not entry:
        click.echo("No configuration is present in CONFIG DB")
        ctx.exit(0)

    if json_format:
        json_dict = {
            "size": entry.get("size", "N/A"),
            "dscp_value": entry.get("dscp_value", "N/A"),
            "queue_index": entry.get("queue_index", "N/A")
        }
        click.echo(json.dumps(json_dict, indent=4))
        ctx.exit(0)

    row = [
        "Packet trimming size",
        format_attr_value(
            entry,
            {
                'name': 'size',
                'is-leaf-list': False
            }
        )
    ]
    body.append(row)

    row = [
        "Packet trimming DSCP value",
        format_attr_value(
            entry,
            {
                'name': 'dscp_value',
                'is-leaf-list': False
            }
        )
    ]
    body.append(row)

    row = [
        "Packet trimming queue index",
        format_attr_value(
            entry,
            {
                'name': 'queue_index',
                'is-leaf-list': False
            }
        )
    ]
    body.append(row)

    click.echo(tabulate.tabulate(body, header, "grid"))


def register(cli):
    """ Register new CLI nodes in root CLI.

    Args:
        cli (click.core.Command): Root CLI node.
    Raises:
        Exception: when root CLI already has a command
                   we are trying to register.
    """
    cli_node = SWITCH_TRIMMING
    if cli_node.name in cli.commands:
        raise Exception(f"{cli_node.name} already exists in CLI")
    cli.add_command(SWITCH_TRIMMING)
